-A LiveView process is a process that receives events as messages, updates its state accordingly, renders a template, and sends back the diffs
-Events can be sent externally by the browser(handle_event), or be sent internally by the LiveView itself or any other Elixir process(handle_info)

Lesson 3 - Button Clicks
-LiveView's have 3 primary callback functions
-mount, render and handle_event
    -mount assigns state to the socket
    -render renders the page using html code and can include eex tags and embedded phoenix
    -handle_event handles events that are sent from render(for example button clicks)
-In this lesson we build a light bar that can be increased/decreased with buttons

Lesson 4 - LiveView Life Cycle
-Initial HTTP request send a HTML page back
-WebSocket is opened and spawns a LiveView Process which can react to events and update the page dynamically

Lesson 5 - Dynamic Form 
-Shows us how to update the page dynamically as we change input values on the page.
-Change light bar from lesson 3 to use a slider instead of up and down buttons
    -Add option to change colors of the light as well

Lesson 6 - Dashboard
-Update page internally, rather than external input by the user
-Send self message after server is connected
    -Use hande_info to update "sales" values on the page to random numbers

Lesson 7 - Search
-Create a search bar for flights using phoenix that uses external input by the user to search values from database
-Also included a loading indicator while waiting for results to show
-Excercise: Implement search for finding a vehicle make or model

Lesson 8 - Autocomplete
-Implemented autocomplete feature into phoenix LiveView(vehicle and flights from last lesson)
    -Suggestions from Elixir file(pre-prepared by the course)

Lesson 9 - Filtering
-Filter boats by type(sporting, fishing and sailing) and price range(low, medium, high)
-Use Ecto to query database of boats
-Use temporary_assigns: to reset data if we don't need to keep information in process memory(just need to render it)
    -Minimizes memory usage on the server
-Exercise: Implement filter for atheles(filter by sport and status)

Lesson 10 - Function Components
-Use function component
    -Takes assigns and returns a heex template
-Useful for managing duplication of markup and styles
-Can render function components inside function components
-Used to make code more readable

Lesson 11 - Live Navigation
-Implement navigation to different url's while keeping the same LiveView process and state
    -Also redirection(shut down current LiveView and mount a new one using same layout)
    -Same websocket connection
-2 Ways to do live navigation
    -navigate to dismount current LiveView and mount new one - Used when you want to navigate to a different LiveView
    -patch to patch state of current LiveView and update URL - Used when you want to navigate to the same LiveView process
-Change page title based on URL

Lesson 12 - Sorting
-Implement sorting for a database, either by id, item name, quantity, etc.(can also sort by ascending or descending)
    -Default values implemented as well
-Sorting parameters shown in the url

Lesson 13 - Paginations
-Add paginations to a database as well as the option to set the number of items per page
-Add way to navigate to previous and next page to view items
-Pagination options stored in url so each page is easy to share and bookmark

Lesson 14 - Live Ecto Forms and Lists
-Add check in system(adds name & phone number to a database)
    -Add validation(check for valid phone number and name to be more than 2 characters)
-Create a form from a map
    -to_form to convert an Ecto changeset into a form data structure

Lesson 15 - Live validation
-Change form to validate as the user is inputting the information

Lesson 16 - Streams
-If we expect a lot of inserts in the database to happen
    -We don't want the data to be kept in memory as part of the LiveView state
    -We want to prepend to list shown in the browser and not keep them on memory in server
-Use streams instead of assign
    -Assigns a new stream to socket
    -html code needs to be wrapped in parent container with phx-change="stream"
-Rather than calling update on socket use stream_insert
-Stream vs temporary_assigns:
    -temporary_assigns for static data that only needs to be rendered
    -Streams for collections of items that you don't want to hold in memory but need to update collection after

Lesson 17 - Toggling State
-Add toggling of state to page from previous lesson
-phx-value-* to fetch value when clicking button
-Add functionality to the check out option of the previous page we built(check in page for volunteers)
    -Page status automatically updated when person checks out(name is greyed and button changes to "Check In")
-Insert updated check_out status into stream
-Streams lets us update, delete or add items from large collections without needing to fetch items from database after initial render
-Add toggling of server status(server LiveView from previous lesson)

Lesson 18 - Live Components
-Extract components from code
    -Don't start by designing components
    -Get things working with code then move stuff into components when it makes sense
-In the lesson, we move form and list of volunteers from render into live component module
    -Allows us to use these components and their event handlers in other LiveViews
-<.live_component module={} id={} /> to render a live component
-In addition to live component handling markup and events, it also holds state, kind of like a mini LiveView
-Add phx-target={@myself} to component module or else event is handled in parent module
-Component rendered in same process as parent LiveView
    -Send message to self when you want to update stream
    -handle info to get message
-Handle events in component module, update stream in parent module with handle_info(send message in component module)
-Function components are stateless while live components are stateful
-Live components can also use external templates

Lesson 19 - Real-Time Updates
-Make Volunteer LiveView page update in real-time for check in and check out
    -If someone checks in or checks out, it should update in real-time for all browsers(shouldn't need to refresh page)
-Phoenix PubSub
    -Broadcast info and use handle_info to make sure all LiveViews are synced and up to date
-Exercise: Broadcast volunteer deletions and make Servers LiveView update in real-time as well

Lesson 20 - Authenticating LiveViews
-Create authentication for LiveView
-Session based authentication system that manages users and tracks sessions
-mix phx.gen.auth (context module name) (schema module name) (database name)
    -Generate using LiveView or Phoenix controller
    -Generates a bunch of pages for accounts, registration, login, register, etc.
-mix deps.get -> mix ecto.migrate
-Links to register and login were generated by code that was injected into the root layout template
    -Account automatically logs in after creating account
    -Unique token created for user and session cookie gets put in browser
    -Account settings and log out button after logging in
-Change topsecret LiveView scope to redirect to login page with error message if user is not logged in
    -Add on_mount hook to ensure user is authenticated

Lesson 21 - Live Sessions
-Track user presence
-live_session in router
    -Group routes that have same authentication strategy and share code that enforces it
    -Redirects between them use the same existing websocket connection

Lesson 22 - Presence Tracking
-Real time of whos currently visting a page
    -Can see who's watching a vid or has it paused
-Create presence tracker module through pheonix with "mix phx.gen.presence" |> Add to application.ex
-Pheonix PubSub to see when someone joins or leaves
    -Message broadcasted when someone joins or leaves to update in real time
    -Also changes emoji when user plays or pauses video

Lesson 23 - JS Commands
-Shop LiveView using mix of JS commands and CSS tailwind
    -Selection of items to add to cart and a toggle option to view cart(slides in and out)
    -Add hiding of backdrop(fading in an out as well)
    -Shake cart when item is added
-Use JavaScript for client side interactions
    -Change phx-click event on toggleable cart to call JavaScript function instead of server callback
-Gives us a declarative way to execute common JavaScript utility functions on the client
-Advantage is that JS commands can be chained(pipe js command into another one)

Lesson 24 - JS Hooks
-Use JavaScript library with LiveView to show a calendar with booking dates
    -Unavailable days are crossed out
    -Use flatpickr javascript library
    -phx-update="ignore" to not patch over the DOM
    -push_event to send event to hook
    -Send event from hook to LiveView to get unavailable dates
-phx-hook to hook in to the lifecycle of any html element and run custom javascript code
    -hooks option in app.js
-JavaScript hooks can be put in a separate file in the assets/js directory(export Hooks variable at end of the file which can then be imported)

Lesson 25 - Key Events
-Send event on key press(left and right key to go through images of a person juggling)
    -Play/pause button to automatically go through list of images
-phx-keyup
    -phx-key for the event to only be sent if a certain key is pressed

Lesson 26 - File Uploads: UI
-Add ability to upload to a LiveView page(can also drag and drop files)
    -Shows preview of selected images
    -Also shows progress bar of upload
    -Warnings for too many files or if the file is too large
-LiveView supports uploading files to a server or directly to a cloud storage service

Lesson 27 - File Uploads: Server
-Copy temp file to directory in the phoenix app that can be served to the user
    -priv/static directory
-Save upload files on the server and display file that have been uploaded on the LiveView

Lesson 28 - File Uploads: cloud
-Upload file to Amazon S3 Bucket
    -Send HTTP POST request
        -Form Data which has the files we're uploading + Signature Version 4 Signing Process(AWS credentials, security policay and signature for auth)
-3 things to do
    -Tell LiveView which storage service to use
    -Send POST request with required info
    -Save S3 URLs for images to the database